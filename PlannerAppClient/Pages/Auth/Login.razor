@page "/auth/login"
@layout AuthLayout
@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorageService
@inject AuthenticationStateProvider authenticationStateProvider


<div class="row">
    <div class="col-12">
        <h2>Log In</h2>
        <EditForm Model="model" OnValidSubmit="loginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType"></AlertMessage>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Email address:</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password:</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>

                <hr />

                <RadzenButton ButtonType="Radzen.ButtonType.Submit"
                              Text="Log In"
                              Disabled="isBusy"
                              ButtonStyle="Radzen.ButtonStyle.Primary"
                              class="btn-block mr-2">

                </RadzenButton>

                <RadzenButton ButtonType="Radzen.ButtonType.Button"
                              Text="Register"
                              Disabled="isBusy"
                              ButtonStyle="Radzen.ButtonStyle.Secondary"
                              Click="goToRegister"
                              class="btn-block mr-2">

                </RadzenButton>
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new LoginRequest();
    bool isBusy = false;
    string message = string.Empty;
    PlannerAppClient.Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    Dictionary<string, string> userInfo = new Dictionary<string, string>();

    public async Task loginUser()
    {
        isBusy = true;

        var result = await authService.LogInUserAsync(model);
        //Console.WriteLine(result.UserInfo);
        if (result.IsSuccess)
        {
            userInfo = result.UserInfo;
            var localUserInfo = new PlannerAppClient.Models.LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier],
            };

            await localStorageService.SetItemAsync<PlannerAppClient.Models.LocalUserInfo>("User", localUserInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/home");
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;

    }

    public void goToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }

}