@page "/plans/details/{id}"

@inject PlanService planService
@inject IFileReaderService fileReaderService
@inject NavigationManager navigationManager
@using Models

@attribute [Authorize]


<h3>Edit Plan @model.Title</h3>
<div class="col-6">
    <AlertMessage Message="@message" MessageType="@messageType"></AlertMessage>
    <EditForm Model="model" OnValidSubmit="async () => await editPlanAsync()">
        <RadzenCard>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <RadzenTextBox Placeholder="Title" @bind-Value="model.Title" Style="margin:10px" />
            <RadzenTextArea Placeholder="Description" @bind-Value="model.Description" Style="margin:10px" />
            <input type="file" style="margin:10px" @ref="inputReference" @onchange="async () => await chooseFileAsync()" />
            <img style="width:100%; margin:10px" src="@imageContent" />
            <hr />
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Success" Disabled="isBusy" class="btn btn-bloc" Text="Edit" Style="margin:5px"></RadzenButton>
        </RadzenCard>
    </EditForm>
</div>

<div class="col-6">
    <RadzenCard>
        <h2>Plan's items</h2>
    </RadzenCard>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public string  Id { get; set; }

    PlanRequest model = new PlanRequest();
    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string fileName = string.Empty;

    bool isBusy = false;

    ElementReference inputReference;

    string message = string.Empty;
    PlannerAppClient.Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    public async Task chooseFileAsync()
    {
        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        var fileInfo = await file.ReadFileInfoAsync();
        string extension = System.IO.Path.GetExtension(fileInfo.Name);
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };
        if (!allowedExtensions.Contains(extension))
        {
            message = "The chosen file is not a valid image file";
            messageType = Models.AlertMessageType.Error;
            return;
        }
        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
            imageContent = $"data:{fileInfo.GetType()};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
            fileName = fileInfo.Name;
        }
    }

    public async Task editPlanAsync()
    {
        isBusy = true;
        var userState = authenticationState.Result;
        planService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        model.CoverFile = fileStream;
        model.FileName = fileName;

        var result = await planService.EditPlanAsync(model);

        if (result.IsSuccess)
        {
            message = "Plan edited successfully";
            messageType = AlertMessageType.Success;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }


        isBusy = false;
    }

    public async Task getPlanById()
    {
        isBusy = true;

        var result = await planService.GetPlanByIdAsync(Id);

        if (result.IsSuccess)
        {
            model.Title = result.Record.Title;
            model.Description = result.Record.Description;
            imageContent = result.Record.CoverPath;
            model.Id = Id;
        }
        else
        {
            message = result.Message;
            messageType = AlertMessageType.Error;
        }

        isBusy = false ;

    }

    protected async override Task OnInitializedAsync()
    {
        var userState = authenticationState.Result;
        planService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        await getPlanById();
    }
}
